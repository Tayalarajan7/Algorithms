Two Pointers:
	Use of two different pointers (usually to keep track of array or string 
indices) to solve a problem involving said indices with the benefit of saving 
time and space.

Common patterns in the two-pointer approach entail:
1. Two pointers, each starting from the beginning and the end until they both 
meet.
2. One pointer moving at a slow pace, while the other pointer moves at twice the 
speed.

Question:
Given a 1-indexed array of integers numbers that is already sorted in 
non-decreasing order, find two numbers such that they add up to a specific 
target number. Let these two numbers be numbers[index1] and numbers[index2] 

where 1 <= first < second <= numbers.length.
Return the indices of the two numbers, index1 and index2, as an integer array 
[index1, index2] of length 2.

The tests are generated such that there is exactly one solution. You may not use 
the same element twice.

Example 1:
Input: numbers = [2,7,11,15], target = 9
Output: [1,2]
Explanation: The sum of 2 and 7 is 9. Therefore index1 = 1, index2 = 2.

Solution:
def twoSum(self, numbers: List[int], target: int) -> List[int]:
        start,end=0,len(numbers)-1
        while start<=end:
            if numbers[start]+numbers[end]==target:
                return [start+1,end+1]
            elif target<numbers[start]+numbers[end]:
                end-=1
            else:
                start+=1